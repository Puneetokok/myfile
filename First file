#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the linked list
struct Node {
    int data;
    struct Node *next;
};

// Function to create a new node
struct Node *createNode(int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1); // Exit with an error code
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of the list
void insertAtBeginning(struct Node **head, int data) {
    struct Node *newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

// Function to insert a node at the end of the list
void insertAtEnd(struct Node **head, int data) {
    struct Node *newNode = createNode(data);
    if (*head == NULL) { // If the list is empty
        *head = newNode;
        return;
    }
    struct Node *temp = *head;
    while (temp->next!= NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to insert a node at a specific position
void insertAtPosition(struct Node **head, int data, int position) {
  if (position <= 0) {
      printf("Invalid position for insertion.\n");
      return;
  }
  if (position == 1) {
    insertAtBeginning(head,data);
    return;
  }

  struct Node *newNode = createNode(data);
  struct Node *current = *head;
  struct Node *previous = NULL;
  int count = 1;

  while (current!= NULL && count < position) {
      previous = current;
      current = current->next;
      count++;
  }

  if (current == NULL && count < position) {
      printf("Position is out of range.\n");
      free(newNode); //Important to free memory if insertion fails
      return;
  }

  newNode->next = current;
  if(previous!= NULL) {
      previous->next = newNode;
  } else {
      *head = newNode; //If inserting at the beginning
  }
}



// Function to delete a node from a specific position
void deleteAtPosition(struct Node **head, int position) {
    if (*head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return;
    }
    if (position <= 0) {
        printf("Invalid position for deletion.\n");
        return;
    }

    struct Node *current = *head;
    struct Node *previous = NULL;
    int count = 1;

    if (position == 1) { // Delete the head node
        *head = current->next;
        free(current);
        return;
    }
    
    while (current!= NULL && count < position) {
        previous = current;
        current = current->next;
        count++;
    }

    if (current == NULL) {
        printf("Position is out of range.\n");
        return;
    }

    previous->next = current->next;
    free(current);
}


// Function to display the linked list
void displayList(struct Node *head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node *temp = head;
    while (temp!= NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}


// Function to search for a value in the list
int search(struct Node *head, int key) {
    struct Node *current = head;
    int position = 1;
    while (current!= NULL) {
        if (current->data == key) {
            return position; // Return the position if found
        }
        current = current->next;
        position++;
    }
    return -1; // Return -1 if not found
}


int main() {
    struct Node *head = NULL;

    insertAtEnd(&head, 10);
    insertAtEnd(&head, 20);
    insertAtEnd(&head, 30);
    insertAtBeginning(&head, 5);
    insertAtPosition(&head, 15, 3); // Insert 15 at position 3
    displayList(head); // Output: 5 -> 10 -> 15 -> 20 -> 30 -> NULL

    deleteAtPosition(&head, 2); // Delete from position 2 (10)
    displayList(head); // Output: 5 -> 15 -> 20 -> 30 -> NULL

    int searchKey = 20;
    int position = search(head, searchKey);
    if (position!= -1) {
        printf("%d found at position %d\n", searchKey, position);
    } else {
        printf("%d not found in the list\n", searchKey);
    }


    return 0;
}
